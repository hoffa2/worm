/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.FromClient');
goog.provide('proto.ToClient');
goog.provide('proto.addnode');
goog.provide('proto.target');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.addnode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.addnode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.addnode.displayName = 'proto.addnode';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.addnode.prototype.toObject = function(opt_includeInstance) {
  return proto.addnode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.addnode} msg The msg instance to transform.
 * @return {!Object}
 */
proto.addnode.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.addnode}
 */
proto.addnode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.addnode;
  return proto.addnode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.addnode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.addnode}
 */
proto.addnode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodeId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.addnode} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.addnode.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.addnode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.addnode.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getNodeId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 node_id = 1;
 * @return {number}
 */
proto.addnode.prototype.getNodeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.addnode.prototype.setNodeId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.target = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.target, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.target.displayName = 'proto.target';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.target.prototype.toObject = function(opt_includeInstance) {
  return proto.target.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.target} msg The msg instance to transform.
 * @return {!Object}
 */
proto.target.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.target}
 */
proto.target.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.target;
  return proto.target.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.target} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.target}
 */
proto.target.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.target} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.target.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.target.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.target.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTarget();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 target = 1;
 * @return {number}
 */
proto.target.prototype.getTarget = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.target.prototype.setTarget = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FromClient = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.FromClient.oneofGroups_);
};
goog.inherits(proto.FromClient, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FromClient.displayName = 'proto.FromClient';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.FromClient.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.FromClient.MsgCase = {
  MSG_NOT_SET: 0,
  CHANGETARGET: 1,
  SHUTDOWNTARGET: 2,
  GETTARGET: 3
};

/**
 * @return {proto.FromClient.MsgCase}
 */
proto.FromClient.prototype.getMsgCase = function() {
  return /** @type {proto.FromClient.MsgCase} */(jspb.Message.computeOneofCase(this, proto.FromClient.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FromClient.prototype.toObject = function(opt_includeInstance) {
  return proto.FromClient.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FromClient} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FromClient.toObject = function(includeInstance, msg) {
  var f, obj = {
    changetarget: jspb.Message.getFieldWithDefault(msg, 1, 0),
    shutdowntarget: jspb.Message.getFieldWithDefault(msg, 2, false),
    gettarget: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FromClient}
 */
proto.FromClient.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FromClient;
  return proto.FromClient.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FromClient} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FromClient}
 */
proto.FromClient.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChangetarget(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShutdowntarget(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGettarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.FromClient} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FromClient.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FromClient.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.FromClient.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(this, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(this, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int32 changeTarget = 1;
 * @return {number}
 */
proto.FromClient.prototype.getChangetarget = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.FromClient.prototype.setChangetarget = function(value) {
  jspb.Message.setOneofField(this, 1, proto.FromClient.oneofGroups_[0], value);
};


proto.FromClient.prototype.clearChangetarget = function() {
  jspb.Message.setOneofField(this, 1, proto.FromClient.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FromClient.prototype.hasChangetarget = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool shutdownTarget = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.FromClient.prototype.getShutdowntarget = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.FromClient.prototype.setShutdowntarget = function(value) {
  jspb.Message.setOneofField(this, 2, proto.FromClient.oneofGroups_[0], value);
};


proto.FromClient.prototype.clearShutdowntarget = function() {
  jspb.Message.setOneofField(this, 2, proto.FromClient.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FromClient.prototype.hasShutdowntarget = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool getTarget = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.FromClient.prototype.getGettarget = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.FromClient.prototype.setGettarget = function(value) {
  jspb.Message.setOneofField(this, 3, proto.FromClient.oneofGroups_[0], value);
};


proto.FromClient.prototype.clearGettarget = function() {
  jspb.Message.setOneofField(this, 3, proto.FromClient.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FromClient.prototype.hasGettarget = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ToClient = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ToClient.oneofGroups_);
};
goog.inherits(proto.ToClient, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ToClient.displayName = 'proto.ToClient';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ToClient.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.ToClient.MsgCase = {
  MSG_NOT_SET: 0,
  ADDNODE: 1,
  TARGET: 2
};

/**
 * @return {proto.ToClient.MsgCase}
 */
proto.ToClient.prototype.getMsgCase = function() {
  return /** @type {proto.ToClient.MsgCase} */(jspb.Message.computeOneofCase(this, proto.ToClient.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ToClient.prototype.toObject = function(opt_includeInstance) {
  return proto.ToClient.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ToClient} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ToClient.toObject = function(includeInstance, msg) {
  var f, obj = {
    addnode: (f = msg.getAddnode()) && proto.addnode.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && proto.target.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ToClient}
 */
proto.ToClient.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ToClient;
  return proto.ToClient.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ToClient} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ToClient}
 */
proto.ToClient.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.addnode;
      reader.readMessage(value,proto.addnode.deserializeBinaryFromReader);
      msg.setAddnode(value);
      break;
    case 2:
      var value = new proto.target;
      reader.readMessage(value,proto.target.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ToClient} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ToClient.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ToClient.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ToClient.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAddnode();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.addnode.serializeBinaryToWriter
    );
  }
  f = this.getTarget();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.target.serializeBinaryToWriter
    );
  }
};


/**
 * optional addnode addnode = 1;
 * @return {?proto.addnode}
 */
proto.ToClient.prototype.getAddnode = function() {
  return /** @type{?proto.addnode} */ (
    jspb.Message.getWrapperField(this, proto.addnode, 1));
};


/** @param {?proto.addnode|undefined} value */
proto.ToClient.prototype.setAddnode = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.ToClient.oneofGroups_[0], value);
};


proto.ToClient.prototype.clearAddnode = function() {
  this.setAddnode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ToClient.prototype.hasAddnode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional target target = 2;
 * @return {?proto.target}
 */
proto.ToClient.prototype.getTarget = function() {
  return /** @type{?proto.target} */ (
    jspb.Message.getWrapperField(this, proto.target, 2));
};


/** @param {?proto.target|undefined} value */
proto.ToClient.prototype.setTarget = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.ToClient.oneofGroups_[0], value);
};


proto.ToClient.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ToClient.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 2) != null;
};


