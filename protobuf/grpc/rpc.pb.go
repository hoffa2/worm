// Code generated by protoc-gen-go.
// source: protobuf/grpc/rpc.proto
// DO NOT EDIT!

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	protobuf/grpc/rpc.proto

It has these top-level messages:
	Empty
	Node
	Alive
	ToNode
	FromNode
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Node struct {
	ID        string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	IpAddress string `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
	RpcPort   string `protobuf:"bytes,3,opt,name=rpc_port,json=rpcPort" json:"rpc_port,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Node) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Node) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *Node) GetRpcPort() string {
	if m != nil {
		return m.RpcPort
	}
	return ""
}

type Alive struct {
	IsAlive bool `protobuf:"varint,1,opt,name=is_alive,json=isAlive" json:"is_alive,omitempty"`
}

func (m *Alive) Reset()                    { *m = Alive{} }
func (m *Alive) String() string            { return proto.CompactTextString(m) }
func (*Alive) ProtoMessage()               {}
func (*Alive) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Alive) GetIsAlive() bool {
	if m != nil {
		return m.IsAlive
	}
	return false
}

type ToNode struct {
	// Types that are valid to be assigned to Msg:
	//	*ToNode_Shutdown
	Msg isToNode_Msg `protobuf_oneof:"msg"`
}

func (m *ToNode) Reset()                    { *m = ToNode{} }
func (m *ToNode) String() string            { return proto.CompactTextString(m) }
func (*ToNode) ProtoMessage()               {}
func (*ToNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isToNode_Msg interface {
	isToNode_Msg()
}

type ToNode_Shutdown struct {
	Shutdown bool `protobuf:"varint,1,opt,name=shutdown,oneof"`
}

func (*ToNode_Shutdown) isToNode_Msg() {}

func (m *ToNode) GetMsg() isToNode_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *ToNode) GetShutdown() bool {
	if x, ok := m.GetMsg().(*ToNode_Shutdown); ok {
		return x.Shutdown
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ToNode) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ToNode_OneofMarshaler, _ToNode_OneofUnmarshaler, _ToNode_OneofSizer, []interface{}{
		(*ToNode_Shutdown)(nil),
	}
}

func _ToNode_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ToNode)
	// msg
	switch x := m.Msg.(type) {
	case *ToNode_Shutdown:
		t := uint64(0)
		if x.Shutdown {
			t = 1
		}
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("ToNode.Msg has unexpected type %T", x)
	}
	return nil
}

func _ToNode_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ToNode)
	switch tag {
	case 1: // msg.shutdown
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Msg = &ToNode_Shutdown{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _ToNode_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ToNode)
	// msg
	switch x := m.Msg.(type) {
	case *ToNode_Shutdown:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type FromNode struct {
	// Types that are valid to be assigned to Msg:
	//	*FromNode_Ok
	Msg isFromNode_Msg `protobuf_oneof:"msg"`
}

func (m *FromNode) Reset()                    { *m = FromNode{} }
func (m *FromNode) String() string            { return proto.CompactTextString(m) }
func (*FromNode) ProtoMessage()               {}
func (*FromNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isFromNode_Msg interface {
	isFromNode_Msg()
}

type FromNode_Ok struct {
	Ok bool `protobuf:"varint,1,opt,name=ok,oneof"`
}

func (*FromNode_Ok) isFromNode_Msg() {}

func (m *FromNode) GetMsg() isFromNode_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *FromNode) GetOk() bool {
	if x, ok := m.GetMsg().(*FromNode_Ok); ok {
		return x.Ok
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FromNode) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FromNode_OneofMarshaler, _FromNode_OneofUnmarshaler, _FromNode_OneofSizer, []interface{}{
		(*FromNode_Ok)(nil),
	}
}

func _FromNode_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FromNode)
	// msg
	switch x := m.Msg.(type) {
	case *FromNode_Ok:
		t := uint64(0)
		if x.Ok {
			t = 1
		}
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("FromNode.Msg has unexpected type %T", x)
	}
	return nil
}

func _FromNode_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FromNode)
	switch tag {
	case 1: // msg.ok
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Msg = &FromNode_Ok{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _FromNode_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FromNode)
	// msg
	switch x := m.Msg.(type) {
	case *FromNode_Ok:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*Node)(nil), "Node")
	proto.RegisterType((*Alive)(nil), "alive")
	proto.RegisterType((*ToNode)(nil), "ToNode")
	proto.RegisterType((*FromNode)(nil), "FromNode")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Chord service

type ChordClient interface {
	Alive(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Alive, error)
	FindPredecessor(ctx context.Context, in *ToNode, opts ...grpc.CallOption) (*FromNode, error)
	Init(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error)
	Notify(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error)
	Shutdown(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type chordClient struct {
	cc *grpc.ClientConn
}

func NewChordClient(cc *grpc.ClientConn) ChordClient {
	return &chordClient{cc}
}

func (c *chordClient) Alive(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Alive, error) {
	out := new(Alive)
	err := grpc.Invoke(ctx, "/chord/Alive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) FindPredecessor(ctx context.Context, in *ToNode, opts ...grpc.CallOption) (*FromNode, error) {
	out := new(FromNode)
	err := grpc.Invoke(ctx, "/chord/FindPredecessor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) Init(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/chord/Init", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) Notify(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/chord/Notify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) Shutdown(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/chord/Shutdown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chord service

type ChordServer interface {
	Alive(context.Context, *Empty) (*Alive, error)
	FindPredecessor(context.Context, *ToNode) (*FromNode, error)
	Init(context.Context, *Node) (*Empty, error)
	Notify(context.Context, *Node) (*Empty, error)
	Shutdown(context.Context, *Empty) (*Empty, error)
}

func RegisterChordServer(s *grpc.Server, srv ChordServer) {
	s.RegisterService(&_Chord_serviceDesc, srv)
}

func _Chord_Alive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).Alive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord/Alive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).Alive(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_FindPredecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).FindPredecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord/FindPredecessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).FindPredecessor(ctx, req.(*ToNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).Init(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).Notify(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).Shutdown(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chord_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chord",
	HandlerType: (*ChordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Alive",
			Handler:    _Chord_Alive_Handler,
		},
		{
			MethodName: "FindPredecessor",
			Handler:    _Chord_FindPredecessor_Handler,
		},
		{
			MethodName: "Init",
			Handler:    _Chord_Init_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _Chord_Notify_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _Chord_Shutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/grpc/rpc.proto",
}

func init() { proto.RegisterFile("protobuf/grpc/rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x50, 0xcd, 0x4e, 0xf3, 0x30,
	0x10, 0x6c, 0xd3, 0x3a, 0x3f, 0x7b, 0xf8, 0x3e, 0xe4, 0x4b, 0xd3, 0x0a, 0x24, 0x64, 0x0e, 0x70,
	0xc1, 0x95, 0xe0, 0x09, 0x8a, 0xa0, 0xa2, 0x97, 0x2a, 0x0a, 0xdc, 0xa3, 0x36, 0x4e, 0x5b, 0x0b,
	0x12, 0x5b, 0xb6, 0x0b, 0xea, 0xc3, 0xf0, 0xae, 0xb8, 0x9b, 0x50, 0x21, 0x71, 0x88, 0xb4, 0x3b,
	0x33, 0xd9, 0x99, 0x31, 0x8c, 0xb4, 0x51, 0x4e, 0xad, 0xf7, 0x9b, 0xe9, 0xd6, 0xe8, 0x72, 0xea,
	0x3f, 0x8e, 0x08, 0x8b, 0x80, 0x3c, 0xd5, 0xda, 0x1d, 0x58, 0x06, 0xc3, 0xa5, 0x12, 0x15, 0xfd,
	0x07, 0xc1, 0xe2, 0x31, 0xed, 0x5f, 0xf6, 0x6f, 0x92, 0xdc, 0x4f, 0xf4, 0x02, 0x40, 0xea, 0x62,
	0x25, 0x84, 0xa9, 0xac, 0x4d, 0x03, 0xc4, 0x13, 0xa9, 0x67, 0x2d, 0x40, 0xc7, 0x10, 0xfb, 0x63,
	0x85, 0x56, 0xc6, 0xa5, 0x03, 0x24, 0x23, 0xbf, 0x67, 0x7e, 0x65, 0x0c, 0xc8, 0xea, 0x5d, 0x7e,
	0x54, 0x47, 0x8d, 0xb4, 0x05, 0xce, 0x78, 0x38, 0xce, 0x23, 0x69, 0x67, 0xc7, 0x95, 0xdd, 0x42,
	0xf8, 0xaa, 0xd0, 0xf7, 0x1c, 0x62, 0xbb, 0xdb, 0x3b, 0xa1, 0x3e, 0x9b, 0x56, 0xf4, 0xdc, 0xcb,
	0x4f, 0xc8, 0x03, 0x81, 0x41, 0x6d, 0xb7, 0xec, 0x0a, 0xe2, 0xb9, 0x51, 0x35, 0xfe, 0x70, 0x06,
	0x81, 0x7a, 0x3b, 0x49, 0xfd, 0xdc, 0x89, 0xee, 0xbe, 0xfa, 0x40, 0xca, 0x9d, 0x32, 0xc2, 0x1b,
	0x13, 0xb4, 0xa1, 0x21, 0xc7, 0x92, 0x93, 0x90, 0x63, 0x0a, 0xd6, 0xa3, 0xd7, 0xf0, 0x7f, 0x2e,
	0x1b, 0x91, 0x99, 0x4a, 0x54, 0xa5, 0x2f, 0xa2, 0x0c, 0x8d, 0x78, 0x1b, 0x65, 0x92, 0xf0, 0x1f,
	0x13, 0x2f, 0x1c, 0xc1, 0x70, 0xd1, 0x48, 0x47, 0x09, 0x47, 0xae, 0xbb, 0xe4, 0x89, 0x31, 0x84,
	0x4b, 0xe5, 0xe4, 0xe6, 0xf0, 0x97, 0xf2, 0x5d, 0x5e, 0xba, 0xe4, 0xbf, 0xac, 0x3b, 0x76, 0x1d,
	0xe2, 0xcb, 0xdf, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x22, 0x38, 0x40, 0xe4, 0x94, 0x01, 0x00,
	0x00,
}
